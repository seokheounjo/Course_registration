name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Build Docker image locally
      run: |
        docker build -t course-registration:latest .
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Transfer JAR file directly instead of Docker image
        scp -o StrictHostKeyChecking=no -i private_key build/libs/*.jar ${USER_NAME}@${HOSTNAME}:/tmp/app.jar
        
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ubuntu
          fi
          
          # Install Java if not exists
          if ! command -v java &> /dev/null; then
            sudo apt update -y
            sudo apt install -y openjdk-17-jdk
          fi
          
          # Stop existing application
          sudo pkill -f "java.*app.jar" || true
          
          # Run new application
          nohup sudo java -jar /tmp/app.jar \
            --spring.profiles.active=prod \
            --spring.datasource.url=jdbc:mysql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
            --spring.datasource.username=${{ secrets.DB_USERNAME }} \
            --spring.datasource.password=${{ secrets.DB_PASSWORD }} \
            --server.port=8087 > /tmp/app.log 2>&1 &
            
          # Clean up
          rm /tmp/app.jar
        '