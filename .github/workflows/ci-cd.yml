name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Upload JAR as artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: application-jar
        path: build/libs/registrationweb-0.0.1-SNAPSHOT.jar

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          # Clean up disk space first
          sudo apt clean
          sudo apt autoremove -y
          sudo rm -rf /var/cache/apt/*
          sudo rm -rf /tmp/*
          sudo docker system prune -af || true
          
          # Stop existing application
          sudo pkill -f "java.*registrationweb" || true
          sudo pkill -f "course-registration" || true
          
          # Check if Java is already installed
          if ! java -version 2>/dev/null; then
            # Install minimal Java without GUI components
            sudo apt update
            sudo apt install -y --no-install-recommends openjdk-17-jre-headless
          fi
          
          # Clone or update repository
          if [ -d "/home/ubuntu/Course_registration" ]; then
            cd /home/ubuntu/Course_registration
            git fetch origin
            git reset --hard origin/main
          else
            cd /home/ubuntu
            git clone --depth 1 https://github.com/seokheounjo/Course_registration.git
            cd Course_registration
          fi
          
          # Build JAR on EC2 (simplified approach)
          chmod +x gradlew
          ./gradlew build -x test
          cp build/libs/registrationweb-0.0.1-SNAPSHOT.jar app.jar
          
          # Run new application
          nohup java -jar app.jar \
            --spring.profiles.active=prod \
            --spring.datasource.url=jdbc:mysql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
            --spring.datasource.username=${{ secrets.DB_USERNAME }} \
            --spring.datasource.password=${{ secrets.DB_PASSWORD }} \
            --server.port=8087 > /tmp/app.log 2>&1 &
            
          # Wait a bit for startup
          sleep 10
          
          # Check if application started
          if pgrep -f "registrationweb\|app.jar" > /dev/null; then
            echo "Application started successfully"
            tail -5 /tmp/app.log
          else
            echo "Application failed to start. Log:"
            tail -20 /tmp/app.log
          fi
        '