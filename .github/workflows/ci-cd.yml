name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Upload JAR as artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: build/libs/registrationweb-0.0.1-SNAPSHOT.jar

  prepare-deployment:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build JAR
      run: ./gradlew clean build -x test
    
    - name: Create deployment package
      run: |
        # Create minimal deployment package
        mkdir -p deploy
        cp build/libs/registrationweb-0.0.1-SNAPSHOT.jar deploy/app.jar
        cp src/main/resources/schema.sql deploy/
        cp src/main/resources/data.sql deploy/
        
        # Create deploy script if it doesn't exist
        if [ ! -f deploy/deploy.sh ]; then
          cat > deploy/deploy.sh << 'EOF'
#!/bin/bash

echo "=== Minimal Deployment Script ==="

# Step 1: Install required packages
echo "Step 1: Installing required packages..."
sudo apt-get update > /dev/null 2>&1
sudo apt-get install -y openjdk-17-jdk mysql-client > /dev/null 2>&1

# Step 2: Verify installations
echo "Step 2: Verifying installations..."
java -version
mysql --version

# Step 3: Test RDS connection
echo "Step 3: Testing RDS connection..."
if mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" -e "SELECT 1" > /dev/null 2>&1; then
    mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" -e "SELECT 1"
    echo "✅ RDS connection successful"
    
    # Step 4: Update RDS database schema and data
    echo "Step 4: Updating RDS database..."
    mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" "$DB_NAME" < schema.sql 2>/dev/null || true
    mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" "$DB_NAME" < data.sql 2>/dev/null || true
    
    # Step 5: Start application with RDS
    echo "Step 5: Starting application with RDS..."
    
    # Kill any existing Java processes
    pkill -f 'java.*app.jar' || true
    sleep 2
    
    # Start the application with proper Spring profiles and datasource configuration
    nohup java -jar app.jar \
        --spring.profiles.active=prod \
        --spring.datasource.url="jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false" \
        --spring.datasource.username="${DB_USERNAME}" \
        --spring.datasource.password="${DB_PASSWORD}" \
        --server.port=8087 > /tmp/app.log 2>&1 &
    
    # Wait for application to start
    sleep 10
    
    # Check if application started
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8087 | grep -q "200\|302"; then
        echo "✅ Application started successfully"
        exit 0
    else
        echo "❌ Application failed to start"
        tail -n 50 /tmp/app.log
        exit 1
    fi
else
    echo "❌ RDS connection failed"
    echo "Starting with H2 fallback..."
    
    # Kill any existing Java processes
    pkill -f 'java.*app.jar' || true
    sleep 2
    
    # Start with H2 database
    nohup java -jar app.jar --server.port=8087 > /tmp/app.log 2>&1 &
    
    sleep 10
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8087 | grep -q "200\|302"; then
        echo "✅ Application started with H2"
        exit 0
    else
        echo "❌ Application failed to start with H2"
        tail -n 50 /tmp/app.log
        exit 1
    fi
fi
EOF
          chmod +x deploy/deploy.sh
        fi
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy/

  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deploy/
        
    - name: Deploy to EC2 (Minimal)
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ubuntu
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Transfer only essential files
        scp -o StrictHostKeyChecking=no -i private_key deploy/* ${USER_NAME}@${HOSTNAME}:/tmp/
        
        # Execute deployment script on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} \
          "cd /tmp && DB_HOST=${DB_HOST} DB_PORT=${DB_PORT} DB_NAME=${DB_NAME} DB_USERNAME=${DB_USERNAME} DB_PASSWORD=${DB_PASSWORD} bash deploy.sh"