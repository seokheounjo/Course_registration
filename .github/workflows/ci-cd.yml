name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Upload JAR as artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: build/libs/registrationweb-0.0.1-SNAPSHOT.jar

  prepare-deployment:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build JAR
      run: ./gradlew clean build -x test
    
    - name: Create deployment package
      run: |
        # Create minimal deployment package
        mkdir -p deploy
        cp build/libs/registrationweb-0.0.1-SNAPSHOT.jar deploy/app.jar
        cp src/main/resources/schema.sql deploy/
        cp src/main/resources/data.sql deploy/
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "=== Minimal Deployment Script ==="
        
        # Stop existing application
        sudo pkill -f "java.*app.jar" || true
        
        # Install only essential packages
        if ! command -v mysql &> /dev/null; then
          echo "Installing MySQL client only..."
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -qq
          sudo apt-get install -y -qq mysql-client-core-8.0 --no-install-recommends
        fi
        
        if ! command -v java &> /dev/null; then
          echo "Installing minimal Java runtime..."
          sudo apt-get install -y -qq openjdk-17-jre-headless --no-install-recommends
        fi
        
        # Update RDS with new data
        echo "Updating RDS database..."
        mysql -h${DB_HOST} -u${DB_USERNAME} -p${DB_PASSWORD} -e "DROP DATABASE IF EXISTS ${DB_NAME}; CREATE DATABASE ${DB_NAME};" 2>/dev/null
        mysql -h${DB_HOST} -u${DB_USERNAME} -p${DB_PASSWORD} ${DB_NAME} < schema.sql 2>/dev/null
        mysql -h${DB_HOST} -u${DB_USERNAME} -p${DB_PASSWORD} ${DB_NAME} < data.sql 2>/dev/null
        
        # Start application with RDS connection
        echo "Starting application..."
        nohup java -Xmx256m -jar app.jar \
          --spring.profiles.active=prod \
          --spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
          --spring.datasource.username=${DB_USERNAME} \
          --spring.datasource.password=${DB_PASSWORD} \
          --server.port=8087 > app.log 2>&1 &
        
        # Wait and verify
        sleep 15
        if pgrep -f "app.jar" > /dev/null; then
          echo "✅ Application started successfully"
          tail -5 app.log
        else
          echo "❌ Application failed to start"
          tail -20 app.log
          exit 1
        fi
        EOF
        
        chmod +x deploy/deploy.sh
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy/

  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: deploy/
        
    - name: Deploy to EC2 (Minimal)
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ubuntu
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Transfer only essential files
        scp -o StrictHostKeyChecking=no -i private_key deploy/* ${USER_NAME}@${HOSTNAME}:/tmp/
        
        # Execute deployment script on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} \
          "cd /tmp && DB_HOST=${DB_HOST} DB_PORT=${DB_PORT} DB_NAME=${DB_NAME} DB_USERNAME=${DB_USERNAME} DB_PASSWORD=${DB_PASSWORD} bash deploy.sh"