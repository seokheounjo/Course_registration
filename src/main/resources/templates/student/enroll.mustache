<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>석현대학교 - 수강 신청</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .full {
            color: #d32f2f;
            font-weight: bold;
        }
        .available {
            color: #388e3c;
            font-weight: bold;
        }
        .main-content.container {
            max-width: 1800px; /* 최대 너비 확장 */
            padding: 0 10px; /* 좌우 패딩 최소화 */
            margin: 0 auto; /* 가운데 정렬 */
        }
        .subject-container {
            display: flex;
            gap: 10px;
            padding: 0; /* 패딩 제거 */
        }
        .subject-list {
            flex: 2; /* 과목 리스트 비율 조정 */
            max-height: 500px;
            overflow-y: auto;
            overflow-x: auto; /* 수평 스크롤 허용 */
        }
        .timetable-container {
            flex: 1.2; /* 시간표 영역 비율 확장 */
        }
        .subject-list h2 {
            background-color: white;
            position: sticky;
            top: 0;
            z-index: 11;
            margin: 0;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }
        .selectable-row {
            cursor: pointer;
        }
        .selected-row {
            background-color: #ffffc0 !important;
        }
        .bulk-action {
            margin-top: 0;
            text-align: right;
        }
        .timetable-header h2 {
            margin: 0;
            flex-grow: 1;
        }
        .timetable {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
            background-color: white;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }
        .timetable th, .timetable td {
            border: 1px solid #ddd;
            padding: 5px;
            text-align: center;
            font-size: 0.9em;
        }
        .timetable th {
            background-color: #1a237e;
            color: white;
            font-size: 0.9em;
        }
        .timetable td {
            height: 40px;
            vertical-align: top;
        }
        #course-table {
            width: 100%;
            table-layout: fixed; /* 테이블 레이아웃 고정 */
            border-collapse: separate;
            border-spacing: 0;
        }
        #course-table thead {
            position: sticky;
            top: 0;
            z-index: 10;
        }

        #course-table thead tr:first-child {
            position: sticky;
            top: 0;
            z-index: 10;
            background-color: #1a237e;
            color: white;
        }

        #course-table th {
            background-color: #1a237e;
            color: white;
            position: sticky;
            top: 0;
            z-index: 10;
            padding: 10px 5px;
        }
        #course-table tbody {
            display: block;
            max-height: 390px; /* h2와 course-header 높이 고려 */
            overflow-y: auto;
        }

        #course-table thead,
        #course-table tbody,
        #course-table tr {
            display: table;
            width: 100%;
            table-layout: fixed;
        }
        .course-header {
            display: flex;
            background-color: #1a237e;
            color: white;
            padding: 10px 5px;
            font-weight: bold;
            position: sticky;
            top: 50px; /* h2 높이 고려 */
            z-index: 10;
        }

        .course-header div {
            flex: 1;
        }

        #course-table {
            width: 100%;
            table-layout: fixed;
        }

        .subject-list {
            max-height: 500px;
            overflow-y: auto;
        }
        #course-table th {
            background-color: #1a237e;
            color: white;
            padding: 10px 5px;
        }

        #course-table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding: 8px 5px;
            font-size: 0.9em;
        }
        .timetable-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .course-block {
            background-color: #e3f2fd;
            border-radius: 4px;
            padding: 3px;
            margin-bottom: 3px;
            font-size: 0.7rem;
        }
        .course-name {
            font-weight: bold;
            margin-bottom: 2px;
        }
        .course-room {
            font-size: 0.6rem;
            color: #666;
        }
        .time-col {
            width: 70px; /* 시간 열 너비 조정 */
            background-color: #f5f5f5;
            font-weight: bold;
            font-size: 0.7em;
        }
        .temp-course-block {
            background-color: #ffffc0;
            border-radius: 4px;
            padding: 3px;
            margin-bottom: 3px;
            font-size: 0.7rem;
            border: 1px dashed #ccc;
        }

        /* 검색 영역 스타일 */
        .search-container {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 4px;
            position: sticky;
            top: 0;
            z-index: 12;
        }
        .search-container input[type="text"] {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
        }
        .search-container select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
            background-color: white;
        }
        .search-container button {
            padding: 8px 15px;
            background-color: #1a237e;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .search-container button:hover {
            background-color: #0e1442;
        }
        .reset-btn {
            padding: 8px 15px;
            background-color: #757575;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 5px;
        }
        .reset-btn:hover {
            background-color: #616161;
        }

        /* 검색결과 없음 표시 */
        .no-results {
            padding: 20px;
            text-align: center;
            color: #757575;
            font-style: italic;
        }
    </style>
</head>
<body>
<!-- 상단 네비게이션 -->
<header class="site-header">
    <div class="container header-container">
        <div class="left-header">
            <a href="/student" style="text-decoration: none; color: white;">
                <div class="logo">석현대학교</div>
                <div class="system-name">수강신청시스템</div>
            </a>
        </div>
        <div class="user-menu">
            <span class="user-info">{{student.name}}님 환영합니다</span>
            <a href="/logout" class="logout-btn">로그아웃</a>
        </div>
    </div>
</header>

<!-- 메인 콘텐츠 -->
<div class="main-content container">
    <div class="header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <h1 class="page-title">수강 신청</h1>
        <div>
            <a href="/student/courses" class="btn btn-primary">수강 내역 보기</a>
            <a href="/student" class="btn" style="background-color: #555; color: white;">학생 메인으로</a>
        </div>
    </div>

    {{#successMessage}}
        <div class="alert alert-success" style="background-color: #dff0d8; color: #3c763d; padding: 10px; margin-bottom: 20px; border-radius: 4px;">
            {{successMessage}}
        </div>
    {{/successMessage}}

    {{#errorMessage}}
        <div class="alert alert-danger" style="background-color: #f2dede; color: #a94442; padding: 10px; margin-bottom: 20px; border-radius: 4px;">
            {{errorMessage}}
        </div>
    {{/errorMessage}}

    <div class="subject-container">
        <div class="subject-list">
            <h2>과목 목록</h2>

            <!-- 검색 영역 추가 -->
            <div class="search-container">
                <select id="searchType">
                    <option value="all">전체</option>
                    <option value="subject">과목명</option>
                    <option value="professor">교수명</option>
                    <option value="day">요일</option>
                </select>
                <input type="text" id="searchInput" placeholder="검색어를 입력하세요...">
                <button id="searchBtn">검색</button>
                <button id="resetBtn" class="reset-btn">초기화</button>
            </div>


            <div class="course-header">
                <div>과목명</div>
                <div>담당교수</div>
                <div>요일</div>
                <div>시간</div>
                <div>강의실</div>
                <div>학년</div>
                <div>학점</div>
                <div>정원 상태</div>
            </div>
            <table id="course-table">
                <tbody>
                {{#timetables}}
                    <tr class="selectable-row" data-id="{{id}}" data-subject="{{subjectName}}" data-professor="{{professorName}}"
                        data-day="{{day}}" data-start="{{startTime}}" data-end="{{endTime}}" data-room="{{room}}"
                        data-credits="{{subject.credits}}" data-grade="{{targetGrade}}" data-subject-id="{{subject.id}}"
                        data-isfull="{{isFull}}">
                        <td>{{subjectName}}</td>
                        <td>{{professorName}}</td>
                        <td>{{day}}</td>
                        <td>{{startTime}} - {{endTime}}</td>
                        <td>{{room}}</td>
                        <td>{{targetGrade}}</td>
                        <td>{{subject.credits}}</td>
                        <td>
                            {{#isFull}}
                                <span class="full">{{capacity}}/{{capacity}} (0)</span>
                            {{/isFull}}
                            {{^isFull}}
                                <span class="available">{{enrolled}}/{{capacity}} ({{remainingSeats}})</span>
                            {{/isFull}}
                        </td>
                    </tr>
                {{/timetables}}
                {{^timetables}}
                    <tr>
                        <td colspan="8" style="text-align: center;">수강 가능한 과목이 없습니다.</td>
                    </tr>
                {{/timetables}}
                </tbody>
            </table>
        </div>

        <div class="timetable-container">
            <div class="timetable-header">
                <h2>시간표 미리보기</h2>
                <div class="bulk-action">
                    <button id="enrollSelectedBtn" class="btn btn-primary" disabled>선택한 과목 수강신청</button>
                </div>
            </div>
            <table class="timetable">
                <thead>
                <tr>
                    <th>시간</th>
                    <th>월요일</th>
                    <th>화요일</th>
                    <th>수요일</th>
                    <th>목요일</th>
                    <th>금요일</th>
                </tr>
                </thead>
                <tbody>
                <!-- 9시 ~ 18시까지 시간표 -->
                <tr>
                    <td class="time-col">09:00 - 10:00</td>
                    <td id="mon-9"></td>
                    <td id="tue-9"></td>
                    <td id="wed-9"></td>
                    <td id="thu-9"></td>
                    <td id="fri-9"></td>
                </tr>
                <tr>
                    <td class="time-col">10:00 - 11:00</td>
                    <td id="mon-10"></td>
                    <td id="tue-10"></td>
                    <td id="wed-10"></td>
                    <td id="thu-10"></td>
                    <td id="fri-10"></td>
                </tr>
                <tr>
                    <td class="time-col">11:00 - 12:00</td>
                    <td id="mon-11"></td>
                    <td id="tue-11"></td>
                    <td id="wed-11"></td>
                    <td id="thu-11"></td>
                    <td id="fri-11"></td>
                </tr>
                <tr>
                    <td class="time-col">12:00 - 13:00</td>
                    <td id="mon-12"></td>
                    <td id="tue-12"></td>
                    <td id="wed-12"></td>
                    <td id="thu-12"></td>
                    <td id="fri-12"></td>
                </tr>
                <tr>
                    <td class="time-col">13:00 - 14:00</td>
                    <td id="mon-13"></td>
                    <td id="tue-13"></td>
                    <td id="wed-13"></td>
                    <td id="thu-13"></td>
                    <td id="fri-13"></td>
                </tr>
                <tr>
                    <td class="time-col">14:00 - 15:00</td>
                    <td id="mon-14"></td>
                    <td id="tue-14"></td>
                    <td id="wed-14"></td>
                    <td id="thu-14"></td>
                    <td id="fri-14"></td>
                </tr>
                <tr>
                    <td class="time-col">15:00 - 16:00</td>
                    <td id="mon-15"></td>
                    <td id="tue-15"></td>
                    <td id="wed-15"></td>
                    <td id="thu-15"></td>
                    <td id="fri-15"></td>
                </tr>
                <tr>
                    <td class="time-col">16:00 - 17:00</td>
                    <td id="mon-16"></td>
                    <td id="tue-16"></td>
                    <td id="wed-16"></td>
                    <td id="thu-16"></td>
                    <td id="fri-16"></td>
                </tr>
                <tr>
                    <td class="time-col">17:00 - 18:00</td>
                    <td id="mon-17"></td>
                    <td id="tue-17"></td>
                    <td id="wed-17"></td>
                    <td id="thu-17"></td>
                    <td id="fri-17"></td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- 선택한 과목을 저장할 숨겨진 폼 -->
    <form id="bulkEnrollForm" method="post" action="/student/enroll/bulk" style="display: none;">
        <input type="hidden" name="timetableIds" id="timetableIds" value="">
    </form>
</div>

<!-- 푸터 이미지 -->
{{> footer}}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // 상수 및 변수 정의
        const MAX_CREDITS = 18; // 최대 신청 가능 학점
        let totalCredits = 0; // 현재 선택된 총 학점

        // 기존 변수
        let selectedCourses = [];

        // 1. 학점 표시 요소 생성 및 추가 (빨간색 동그라미 위치에)
        const creditDisplayContainer = document.createElement('div');
        creditDisplayContainer.id = 'credit-display';
        creditDisplayContainer.innerHTML = `
            <span class="credit-label">신청학점:</span>
            <span id="current-credits">0</span>
            <span>/</span>
            <span id="max-credits">${MAX_CREDITS}</span>
        `;
        creditDisplayContainer.style.cssText = `
            display: inline-block;
            padding: 5px 15px;
            background-color: #e8f5e9;
            border-radius: 20px;
            font-weight: bold;
            margin-right: 10px;
            border: 2px solid #388e3c;
        `;

        // 시간표 미리보기 옆 빨간색 동그라미 위치에 삽입
        const timetableHeader = document.querySelector('.timetable-header');
        timetableHeader.insertBefore(creditDisplayContainer, timetableHeader.querySelector('.bulk-action'));

        // 2. 현재 수강 신청한 과목들의 학점 계산
        const enrollments = [
    {{#enrollments}}
        {
            subjectName: "{{subject.name}}",
            professorName: "{{subject.professor.name}}",
            day: "{{timetable.day}}",
            startTime: "{{timetable.startTime}}",
            endTime: "{{timetable.endTime}}",
            room: "{{timetable.room}}",
            credits: {{subject.credits}},
                    subject: {
            id: "{{subject.id}}" // 과목 ID 추가
        }
        },
    {{/enrollments}}
    ];
    
    // 디버그 정보 출력
    console.log("DEBUG: Enrollments data:", enrollments);
    console.log("DEBUG: Enrollments count:", enrollments.length);

    // 요일별 시간표 셀 ID 접두사
    const dayPrefix = {
        "월요일": "mon",
        "화요일": "tue",
        "수요일": "wed",
        "목요일": "thu",
        "금요일": "fri"
    };

    // 3. 각 과목 행에 학점 데이터 속성 추가
    const courseRows = document.querySelectorAll('.selectable-row');
    courseRows.forEach(row => {
        // timetable ID를 사용하여 서버에서 받은 데이터에서 학점 정보를 찾음
        const timetableId = row.getAttribute('data-id');

        // 여기서는 data 속성으로 이미 전달된 학점 정보를 사용
        // 실제 구현에서는 서버에서 이 정보를 전달해야 함
        if (!row.hasAttribute('data-credits')) {
            // 기본값을 3으로 설정 (만약 데이터가 없는 경우)
            row.setAttribute('data-credits', '3');
        }
    });

    // 4. 학점 계산 및 표시 함수
    function calculateTotalCredits() {
        let total = 0;

        // 이미 등록된 과목의 학점 합계
        enrollments.forEach(enrollment => {
            total += (enrollment.credits || 0);
        });

        // 선택된 과목의 학점 합계
        selectedCourses.forEach(course => {
            total += (parseInt(course.credits) || 0);
        });

        totalCredits = total;
        return total;
    }

    function updateCreditDisplay() {
        const currentCreditsElement = document.getElementById('current-credits');

        // 학점 값 업데이트
        currentCreditsElement.textContent = totalCredits;

        // 학점 초과 시 색상 변경
        if (totalCredits > MAX_CREDITS) {
            creditDisplayContainer.style.backgroundColor = '#ffebee';
            creditDisplayContainer.style.borderColor = '#d32f2f';
            currentCreditsElement.style.color = '#d32f2f';
        } else if (totalCredits === MAX_CREDITS) {
            creditDisplayContainer.style.backgroundColor = '#fff9c4';
            creditDisplayContainer.style.borderColor = '#fbc02d';
            currentCreditsElement.style.color = '#f57f17';
        } else {
            creditDisplayContainer.style.backgroundColor = '#e8f5e9';
            creditDisplayContainer.style.borderColor = '#388e3c';
            currentCreditsElement.style.color = '#388e3c';
        }
    }

    // 5. 각 수강 과목을 시간표에 추가
    function displayEnrollmentsOnTimetable() {
        // 기존 등록된 과목 표시
        enrollments.forEach(function(enrollment) {
            // 시작 시간과 종료 시간을 시간 단위로 변환
            const startHour = parseInt(enrollment.startTime.split(':')[0]);
            const endHour = parseInt(enrollment.endTime.split(':')[0]);

            // 해당 요일의 접두사 가져오기
            const prefix = dayPrefix[enrollment.day];
            if (!prefix) return;

            // 시작 시간부터 종료 시간까지 각 시간 셀에 과목 추가
            for (let hour = startHour; hour < endHour; hour++) {
                const cellId = `${prefix}-${hour}`;
                const cell = document.getElementById(cellId);

                if (cell) {
                    const courseBlock = document.createElement('div');
                    courseBlock.className = 'course-block';

                    const courseName = document.createElement('div');
                    courseName.className = 'course-name';
                    courseName.textContent = enrollment.subjectName;

                    const courseRoom = document.createElement('div');
                    courseRoom.className = 'course-room';
                    courseRoom.textContent = enrollment.room;

                    courseBlock.appendChild(courseName);
                    courseBlock.appendChild(courseRoom);
                    cell.appendChild(courseBlock);
                }
            }
        });
    }

    // 6. 시간 충돌 확인 함수
    function hasTimeConflict(course) {
        // 기존 등록된 과목과 충돌 확인
        for (let i = 0; i < enrollments.length; i++) {
            const enrollment = enrollments[i];
            if (enrollment.day === course.day) {
                const courseStart = parseInt(course.startTime.split(':')[0]);
                const courseEnd = parseInt(course.endTime.split(':')[0]);
                const enrollmentStart = parseInt(enrollment.startTime.split(':')[0]);
                const enrollmentEnd = parseInt(enrollment.endTime.split(':')[0]);

                // 시간 겹침 확인
                if ((courseStart < enrollmentEnd && courseEnd > enrollmentStart)) {
                    return true;
                }
            }
        }

        // 선택된 과목들과 충돌 확인
        for (let i = 0; i < selectedCourses.length; i++) {
            const selected = selectedCourses[i];
            if (selected.id !== course.id && selected.day === course.day) {
                const courseStart = parseInt(course.startTime.split(':')[0]);
                const courseEnd = parseInt(course.endTime.split(':')[0]);
                const selectedStart = parseInt(selected.startTime.split(':')[0]);
                const selectedEnd = parseInt(selected.endTime.split(':')[0]);

                // 시간 겹침 확인
                if ((courseStart < selectedEnd && courseEnd > selectedStart)) {
                    return true;
                }
            }
        }

        return false;
    }

    // 7. 선택한 과목을 시간표에 미리보기로 표시
    function displaySelectedCoursesOnTimetable() {
        // 임시 선택된 과목들 시간표에서 제거
        const tempBlocks = document.querySelectorAll('.temp-course-block');
        tempBlocks.forEach(block => block.remove());

        // 선택된 과목들 시간표에 표시
        selectedCourses.forEach(function(course) {
            const startHour = parseInt(course.startTime.split(':')[0]);
            const endHour = parseInt(course.endTime.split(':')[0]);
            const prefix = dayPrefix[course.day];

            if (!prefix) return;

            for (let hour = startHour; hour < endHour; hour++) {
                const cellId = `${prefix}-${hour}`;
                const cell = document.getElementById(cellId);

                if (cell) {
                    const courseBlock = document.createElement('div');
                    courseBlock.className = 'temp-course-block';

                    const courseName = document.createElement('div');
                    courseName.className = 'course-name';
                    courseName.textContent = course.subjectName;

                    const courseRoom = document.createElement('div');
                    courseRoom.className = 'course-room';
                    courseRoom.textContent = course.room;

                    courseBlock.appendChild(courseName);
                    courseBlock.appendChild(courseRoom);
                    cell.appendChild(courseBlock);
                }
            }
        });
    }

// 클릭 이벤트 처리 함수 수정 - 중복 과목 및 학년 체크 추가
function addRowClickListeners() {
    const rows = document.querySelectorAll('.selectable-row');

    // 현재 학생의 학년 가져오기
    const studentGrade = "{{student.grade}}"; // Mustache 템플릿 변수

    rows.forEach(row => {
        row.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            const isFull = this.getAttribute('data-isfull') === 'true';
            const subjectId = this.getAttribute('data-subject-id');
            const targetGrade = this.getAttribute('data-grade');

            // 정원 마감된 과목은 선택 불가
            if (isFull) {
                alert("정원이 마감된 과목은 선택할 수 없습니다.");
                return;
            }

            // 학년 제한 확인
            if (targetGrade && targetGrade !== "전체" && targetGrade !== studentGrade) {
                alert(`이 과목은 ${targetGrade}학년 대상 과목입니다. 현재 학년(${studentGrade})과 맞지 않습니다.`);
                return;
            }

            // 선택된 과목 정보
            const course = {
                id: id,
                subjectId: subjectId,
                subjectName: this.getAttribute('data-subject'),
                professorName: this.getAttribute('data-professor'),
                day: this.getAttribute('data-day'),
                startTime: this.getAttribute('data-start'),
                endTime: this.getAttribute('data-end'),
                room: this.getAttribute('data-room'),
                credits: parseInt(this.getAttribute('data-credits') || 3),
                grade: targetGrade
            };

            // 이미 선택된 경우 선택 취소
            const index = selectedCourses.findIndex(c => c.id === id);
            if (index !== -1) {
                selectedCourses.splice(index, 1);
                this.classList.remove('selected-row');

                // 학점 표시 업데이트
                calculateTotalCredits();
                updateCreditDisplay();
            } else {
                // 이미 같은 과목을 수강 중인지 확인
                const isDuplicateSubject = checkDuplicateSubject(subjectId);
                if (isDuplicateSubject) {
                    alert("이미 수강 중인 과목입니다. 동일 과목을 중복 신청할 수 없습니다.");
                    return;
                }

                // 이미 같은 과목을 선택했는지 확인
                const isDuplicateSelected = selectedCourses.some(c => c.subjectId === subjectId);
                if (isDuplicateSelected) {
                    alert("이미 선택한 과목입니다. 동일 과목을 중복 신청할 수 없습니다.");
                    return;
                }

                // 시간 충돌 확인
                if (hasTimeConflict(course)) {
                    alert("선택한 과목은 이미 등록된 과목이나 다른 선택된 과목과 시간이 겹칩니다.");
                    return;
                }

                // 학점 초과 확인
                const newCredits = calculateTotalCredits() + course.credits;
                if (newCredits > MAX_CREDITS) {
                    alert(`선택한 과목을 추가하면 최대 학점(${MAX_CREDITS}학점)을 초과합니다.`);
                    return;
                }

                // 과목 선택
                selectedCourses.push(course);
                this.classList.add('selected-row');

                // 학점 표시 업데이트
                calculateTotalCredits();
                updateCreditDisplay();
            }

            // 시간표 업데이트
            displaySelectedCoursesOnTimetable();

            // 일괄 신청 버튼 활성화/비활성화
            document.getElementById('enrollSelectedBtn').disabled = selectedCourses.length === 0;
        });
    });
}

// 이미 같은 과목을 수강 중인지 확인하는 함수
function checkDuplicateSubject(subjectId) {
    if (!subjectId) return false;

    // 기존 수강 과목 배열에서 과목 ID 비교
    for (let i = 0; i < enrollments.length; i++) {
        if (enrollments[i].subject && enrollments[i].subject.id === subjectId) {
            return true;
        }
    }
    return false;
}
    // 9. 일괄 수강신청 버튼 이벤트
    document.getElementById('enrollSelectedBtn').addEventListener('click', function() {
        if (selectedCourses.length === 0) {
            alert("선택된 과목이 없습니다.");
            return;
        }

        // 선택된 과목 ID를 폼에 설정
        const timetableIds = selectedCourses.map(course => course.id).join(',');
        document.getElementById('timetableIds').value = timetableIds;

        // 폼 제출
        document.getElementById('bulkEnrollForm').submit();
    });

    // 10. 검색 기능에서 학점으로 검색 가능하도록 기능 추가 (검색 타입 선택자에 옵션 추가)
    // 검색 옵션에 학년 추가 및 검색 함수 수정
// 검색 옵션 추가
const searchTypeSelect = document.getElementById('searchType');
if (searchTypeSelect) {
    // 학점 옵션 확인 및 추가
    let hasCreditsOption = false;
    for (let i = 0; i < searchTypeSelect.options.length; i++) {
        if (searchTypeSelect.options[i].value === 'credits') {
            hasCreditsOption = true;
            break;
        }
    }

    if (!hasCreditsOption) {
        const creditsOption = document.createElement('option');
        creditsOption.value = 'credits';
        creditsOption.textContent = '학점';
        searchTypeSelect.appendChild(creditsOption);
    }

    // 학년 옵션 확인 및 추가
    let hasGradeOption = false;
    for (let i = 0; i < searchTypeSelect.options.length; i++) {
        if (searchTypeSelect.options[i].value === 'grade') {
            hasGradeOption = true;
            break;
        }
    }

    if (!hasGradeOption) {
        const gradeOption = document.createElement('option');
        gradeOption.value = 'grade';
        gradeOption.textContent = '학년';
        searchTypeSelect.appendChild(gradeOption);
    }
}

// 검색 함수 수정 - 학년 검색 추가
function searchCourses() {
    const searchType = document.getElementById('searchType').value;
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    const rows = document.querySelectorAll('#course-table tr');
    let hasResults = false;

    rows.forEach(row => {
        let match = false;

        // 검색 타입에 따라 해당 속성 값 검색
        if (searchType === 'all' || searchType === '') {
            const subjectName = row.getAttribute('data-subject')?.toLowerCase() || '';
            const professorName = row.getAttribute('data-professor')?.toLowerCase() || '';
            const day = row.getAttribute('data-day')?.toLowerCase() || '';
            const credits = row.getAttribute('data-credits') || '';
            const grade = row.getAttribute('data-grade')?.toLowerCase() || '';

            match = subjectName.includes(searchInput) ||
                    professorName.includes(searchInput) ||
                    day.includes(searchInput) ||
                    credits === searchInput ||
                    grade.includes(searchInput);
        }
        else if (searchType === 'subject') {
            const subjectName = row.getAttribute('data-subject')?.toLowerCase() || '';
            match = subjectName.includes(searchInput);
        }
        else if (searchType === 'professor') {
            const professorName = row.getAttribute('data-professor')?.toLowerCase() || '';
            match = professorName.includes(searchInput);
        }
        else if (searchType === 'day') {
            const day = row.getAttribute('data-day')?.toLowerCase() || '';
            match = day.includes(searchInput);
        }
        else if (searchType === 'credits') {
            const credits = row.getAttribute('data-credits') || '';
            match = credits === searchInput;
        }
        else if (searchType === 'grade') {
            const grade = row.getAttribute('data-grade')?.toLowerCase() || '';
            match = grade.includes(searchInput);
        }

        // 검색 결과에 따라 행 표시/숨김
        if (match) {
            row.style.display = '';
            hasResults = true;
        } else {
            row.style.display = 'none';
        }
    });

    // 검색 결과가 없을 경우 메시지 표시
    const noResultsElement = document.querySelector('.no-results');
    if (noResultsElement) {
        noResultsElement.remove();
    }

    if (!hasResults && searchInput) {
        const tbody = document.querySelector('#course-table tbody');
        const noResultsRow = document.createElement('tr');
        noResultsRow.className = 'no-results';
        noResultsRow.innerHTML = '<td colspan="8">검색 결과가 없습니다.</td>'; // 컬럼 수 8로 수정
        tbody.appendChild(noResultsRow);
    }
}
    // 12. 검색 초기화 함수
    function resetSearch() {
        document.getElementById('searchType').value = 'all';
        document.getElementById('searchInput').value = '';

        const rows = document.querySelectorAll('#course-table tr');
        rows.forEach(row => {
            row.style.display = '';
        });

        const noResultsElement = document.querySelector('.no-results');
        if (noResultsElement) {
            noResultsElement.remove();
        }
    }

    // 13. 이벤트 리스너 설정
    document.getElementById('searchBtn').addEventListener('click', searchCourses);
    document.getElementById('searchInput').addEventListener('keyup', function(event) {
        if (event.key === 'Enter') {
            searchCourses();
        }
    });
    document.getElementById('resetBtn').addEventListener('click', resetSearch);

    // 초기화 작업
    displayEnrollmentsOnTimetable();
    addRowClickListeners();
    calculateTotalCredits();
    updateCreditDisplay();

    // 이미 수강 신청한 과목의 학점 표시
    const enrollmentCredits = enrollments.reduce((total, enrollment) => {
        return total + (enrollment.credits || 0);
    }, 0);

    if (enrollmentCredits > 0) {
        totalCredits = enrollmentCredits;
        updateCreditDisplay();
    }
});
</script>
</body>
</html>